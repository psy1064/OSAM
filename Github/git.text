처음 세팅
1. 나의 Github 계정 이메일과 이름
git config --global user.email " "
git config --global user.name " "

2. 명령어(git + )
add : 커밋할 목록에 추가
commit : 커밋(히스토리의 한단위) 만들기
	-> -m : commit message 추가
	ex) git commit -m "Message"
	-> --amend : 커밋 수정
	ex) git commit --amend
push : 현재까지 역사 (commit) Github에 밀어넣기
	-> -f : 강제로 원격 저장소에 push ex) 커밋 수정 후 push 충돌 시
	ex) git push origin master -f
	or git push origin master -force
	or git push origin +master
init : 현재 티렉터리에 Git 저장소를 생성
diff : 추가, 변경된 사항을 확인
shortlog : log를 간단히 출력 ( )안의 수는 커밋된 수
log : 소스 변경 이력 출력
status : 현재 작업 상태 출력, 커밋할 목록 출력
remoate : 원격 저장소 관리
	-> push 하기 전에 원격저장소 등록
	-> git remote add <이름> <URL>
	ex) git remote add origin https://github.com/psy1064/Osam
	-> 지우고 싶다면 remove(rm) 
	ex) git remote remove origin
	or git remote rm origin
reset : 취소
	-> add 취소 : git reset (HEAD) [파일명]
	ex) git reset test
	-> commit 취소 : git reset HEAD~(n)
	ex) git reset HEAD~2 : 마지막 2개 커밋 취소
	-> HEAD : 현재 브런치 마지막 commit의 포인터(주소)
checkout : 저장소로부터 소스를 가져와 로컬에 복사
	-> -b : 신규브랜치 생성, 원격 저장소의 브랜치와 연결
	ex) git checkout -b develop
	-> git branch [branch 명] : branch 변경
clone : 저장소의 복사본을 생성
	-> git clone [저장소_주소] [로컬_디럭테러]
	ex) git clone http://github.com/psy1064/git-training ./Osam
merge : 여러 branch를 통합
	-> git merge [원하는 branch명]
	ex) git merge develop
branch : branch 생성, 삭제, 이름 변경 등 관리
	-> -d : branch 삭제(branch의 소스가 현재 HEAD에 적용이 되었는지 확인 후 삭제)
	-> -D : branch 삭제(HEAD에 적용되어 있는지 확인 X)
	-> -m : branch 이름 변경(이미 존재하는 이름이면 덮어쓰지 않고 오류 메세지 출력)
	-> -M : branch 이름 변경(이미 존재하는 이름이면 덮어씀)
	-> git branch [branch 명] : 해당 branch가 없을 경우 생성
	

3. pull-request : 다른 프로젝트에 내가 만든 commit 제출
순서 : 상대방의 프로젝트를 복사(fork) -> 내 계정에 같은 이름의 프로젝트 생성 -> commit & push -> pull-request
fork 
	-> 원하는 프로젝트의 원격 저장소에서 Fork 클릭
	-> 내 저장소에 생성
	
project production
	-> git clone [fork한 repository에서 복사한 URL]
	-> git checkout -b [branch name]
	
git add & commit & push

pull-request
	-> fork해서 만들어진 project page로 이동
	-> click branch tap
	-> pull-request 하려는 branch에서 New pull-request 버튼 클릭
	-> pull-request 보내기
	-> 본래 project에서 만들어진 pull-request 확인


4. branch : 가지치기, 버전관리 

5. rebase : base 교체
	-> clone 하여 개발 중, 최신 업데이트 파일이 나옴
	-> 쌓아온 commit 을 빼고 tree를 최신 업데이트
	-> 그 후 commit 을 쌓는다
	
rebase-interactive : 중간에 낀 commit 수정
	1. git rebase -i --root 
	2. 에디터가 출력되는데 commit 창이 나온다
	3. 원하는 커밋의 pick을 edit으로 수정 후 저장
	4. git shortlog로 보면 수정을 원하는 commit 으로 rebase 상태
	5. git commit --amend로 커밋 수정
	6. git rebase --continue로 rebase 마무리
	
6. git blame : 특정 커밋을 식별할 때 사용, 수정 사항을 볼 수 있음
	-> git blame [option] [rev-opts] [rev] [file]
	ex) git blame HEAD Github/git.text
	ex) git blame HEAD -L 5,9 Github/git.text 
	: git.text의 5~9 줄의 마지막 수정 정보 조회

